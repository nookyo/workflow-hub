name: Reusable Build and Docker Workflow

on:
  workflow_call:
    inputs:

      maven_options:
        required: false
        type: string
        default: ""
      maven_command:
        required: false
        type: string
        default: "clean package"

      dockerfile_path:
        required: true
        type: string
      docker_image_name:
        required: true
        type: string

      push_image:
        required: false
        type: boolean
        default: true

      docker_tags:
        required: true
        type: string


    secrets:
      dockerhub_username:
        required: true
      dockerhub_password:
        required: true

jobs:
  # Step 1: Build the application
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Print Docker tags
        run: echo docker tag = ${{ inputs.docker_tags }}

      # Build the application with Maven
      - name: Build with Maven
        run: mvn ${{ inputs.maven_command }}

      # Upload the built artifact as a workflow artifact
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: qip-engine-jar
          path: target/qip-engine-*-exec.jar

  # Step 2: Build the Docker image
  docker:
    runs-on: ubuntu-latest
    needs: build
    steps:

      - name: Checkout code
        uses: actions/checkout@v3

      # Download the artifact from the build job
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: qip-engine-jar
          path: ./target

      # Build and push Docker image
      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.dockerhub_username }}
          password: ${{ secrets.dockerhub_password }}

      - name: Print Docker tags
        run: echo docker tag = ${{ inputs.docker_tags }}

      - name: Build and push Docker image
        if: ${{ inputs.push_image }}
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ${{ inputs.dockerfile_path }}
          push: true
          tags: ${{ secrets.dockerhub_username }}/${{ inputs.docker_image_name }}:${{ inputs.docker_tags }}